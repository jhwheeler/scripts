#!/usr/bin/env bash

# Invox: simple invoice formatter
# See usage message for more details

set -u
set -e
set -o pipefail

usage() {
  echo "
  invox
  Simple invoice formatter

  USAGE: invox [OPTIONS]

  Requires time period and hours worked to be passed in a pipeline (see example below)

  OPTIONS
  -i <string> (required)   invoice_id, the identifer for this invoice
  -d <string> (required)   date of the invoice
  -c <string>              custom config file
  -t <string>              custom html template
  -h                       help (this message)

  EXAMPLES

  With defaults:
  $ watson report -G | invox -i 97 -d \"1 August, 2020\"

  The invoice will be saved as invoice_97.pdf in the current directory.

  With custom config, template, and filename:
  $ watson report -G | ./invox -i MC81 -d \"1 August 2020\" -t ./template.html -c ./.invoxrc -f \"Invoice\"

  The invoice will be saved as Invoice.pdf in the current directory.

  SETUP
  1. Config file located in ~/.config/invox/.invoxrc
  - includes all the variables to be replaced in the template file
  - can be overriden with the -c flag (see above)
  2. Template located in ~/.config/invox/template.html
  - can be overriden with the -t flag (see above)

  You can have whatever variables in the config and template, as long as they are the same. Variables are wrapped in double brackets in the template file, e.g. {{recipient_name}}.
  "
}

# required args:
# -i invoice_id
# -d date

config=~/.config/invox/.invoxrc
template=~/.config/invox/template.html

while getopts "i:d:t:c:f:h" opt; do
  case "$opt" in
    i )
      invoice_id="$OPTARG"
      ;;
    d )
      date="$OPTARG"
      ;;
    c )
      config="$OPTARG"
      ;;
    t )
      template="$OPTARG"
      ;;
    f )
      filename="$OPTARG"
      ;;
    h )
      usage
      exit 0
      ;;
    \? )
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

if [[ ! ${date+x} ]]
then echo "-d required: set the date of the invoice" && usage && exit 1
fi

if [[ ! ${invoice_id+x} ]]
then echo "-i required: set the invoice id" && usage && exit 1
fi

# default filename if no -f flag is set
if [[ ! ${filename+x} ]]
then filename=Invoice_${invoice_id}
fi

if test -t 0; then
  echo "Time sheet required in pipeline. Currently only supports watson."
  usage
  exit 1
fi

# read time period and hours worked from stdin (piped from `watson report -G`)
read -r time_period
read -r _
read -r details

hours=$(perl -ne 'print "$&\n" if /\d+(?=h)/' <<< "$details")
minutes=$(perl -ne 'print "$&\n" if /\d+(?=m)/' <<< "$details")

# Round up the hour count at a half hour
if [[ $minutes -gt 30 ]]
then
  ((hours=hours+1))
fi

# get values for report from config file
declare -A report
while IFS='=' read -d $'\n' -r key value; do
  # Skip empty lines & lines starting with sharp (comments)
  [[ "$key" =~ ^([[:space:]]*|[[:space:]]*#.*)$ ]] && continue

  report[$key]="$value"
done < "$config"

let "cost = hours * report[hourly_rate]"

# add date, invoice id, time period, hours, and cost to report
report[time_period]="$time_period"
report[hours]="$hours"
report[cost]="$cost"
report[date]="$date"
report[invoice_id]="$invoice_id"

# get all variable names in template file
vars=$(grep -oE '\{\{([A-Za-z0-9_]+)\}\}' "$template" |
  gsed -rn 's/.*\{\{([A-Za-z0-9_]+)\}\}.*/\1/p' |
  sort |
  uniq)

cp "$template" "$filename.html"

for var in $vars; do
  if [ "${report[$var]}" ]; then
    value="$(echo "${report[$var]}")"
    gsed -i "s/{{$var}}/${report[$var]}/" "$filename.html"
  fi
done

echo "Creating invoice, saving to $filename.pdf"

# generate PDF based on html file; replace wkhtmltopdf err, if any, w/ custom err message
wkhtmltopdf -T 0 -B 0 -L 0 -R 0 "$filename.html" "$filename.pdf" > /dev/null 2>&1 && open "$filename.pdf" || echo "Failed to create invoice PDF. Check filename for formatting errors."
